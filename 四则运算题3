//四则运算3
//成员：张勋 王楗
#include <iostream>
#include <fstream>
#include <string>
#include <cmath>
#include <sstream>
#include <time.h>
using namespace std;

#define true 1
#define false 0
#define OPSETSIZE 8

typedef int Status;
unsigned char Prior[8][8] =
{ // 运算符优先级表
	// '+' '-' '*' '/' '(' ')' '#' '^'
	/*'+'*/'>', '>', '<', '<', '<', '>', '>', '<',
	/*'-'*/'>', '>', '<', '<', '<', '>', '>', '<',
	/*'*'*/'>', '>', '>', '>', '<', '>', '>', '<',
	/*'/'*/'>', '>', '>', '>', '<', '>', '>', '<',
	/*'('*/'<', '<', '<', '<', '<', '=', ' ', '<',
	/*')'*/'>', '>', '>', '>', ' ', '>', '>', '>',
	/*'#'*/'<', '<', '<', '<', '<', ' ', '=', '<',
	/*'^'*/'>', '>', '>', '>', '<', '>', '>', '>'
};
typedef struct StackChar
{
	char c;
	struct StackChar *next;
}SC;       //StackChar类型的结点SC
typedef struct StackFloat
{
	float f;
	struct StackFloat *next;
}SF;       //StackFloat类型的结点SF

SC *Push(SC *s, char c)          //SC类型的指针Push，返回p
{
	SC *p = (SC*)malloc(sizeof(SC));
	p->c = c;
	p->next = s;
	return p;
}
SF *Push(SF *s, float f)        //SF类型的指针Push，返回p
{
	SF *p = (SF*)malloc(sizeof(SF));
	p->f = f;
	p->next = s;
	return p;
}
SC *Pop(SC *s)    //SC类型的指针Pop
{
	SC *q = s;
	s = s->next;
	free(q);
	return s;
}
SF *Pop(SF *s)      //SF类型的指针Pop
{
	SF *q = s;
	s = s->next;
	free(q);
	return s;
}


float Operate(float a, unsigned char theta, float b)      //计算函数Operate
{
	switch (theta)
	{
	case '+': return a + b;
	case '-': return a - b;
	case '*': return a*b;
	case '/': return a / b;
	case '^': return pow(a, b);
	default: return 0;
	}
}

char OPSET[OPSETSIZE] = { '+', '-', '*', '/', '(', ')', '#', '^' };
Status In(char Test, char *TestOp)
{
	int Find = false;
	for (int i = 0; i < OPSETSIZE; i++)
	{
		if (Test == TestOp[i])
			Find = true;
	}
	return Find;
}

Status ReturnOpOrd(char op, char *TestOp)
{
	for (int i = 0; i < OPSETSIZE; i++)
	{
		if (op == TestOp[i])
			return i;
	}
}

char precede(char Aop, char Bop)
{
	return Prior[ReturnOpOrd(Aop, OPSET)][ReturnOpOrd(Bop, OPSET)];
}


//计算运算式数值：EvaluateExpression
//-------------------------------------------------------------
float EvaluateExpression(char* MyExpression)
{
	// 算术表达式求值的算符优先算法
	// 设OPTR和OPND分别为运算符栈和运算数栈，OP为运算符集合
	SC *OPTR = NULL;       // 运算符栈，字符元素
	SF *OPND = NULL;       // 运算数栈，实数元素
	char TempData[20];
	float Data, a, b;
	char theta, *c, Dr[] = { '#', '\0' };
	OPTR = Push(OPTR, '#');
	c = strcat(MyExpression, Dr);
	strcpy(TempData, "\0");//字符串拷贝函数
	while (*c != '#' || OPTR->c != '#')
	{
		if (!In(*c, OPSET))
		{
			Dr[0] = *c;
			strcat(TempData, Dr);           //字符串连接函数
			c++;
			if (In(*c, OPSET))
			{
				Data = atof(TempData);       //字符串转换函数(double)
				OPND = Push(OPND, Data);
				strcpy(TempData, "\0");
			}
		}
		else    // 不是运算符则进栈
		{
			switch (precede(OPTR->c, *c))
			{
			case '<': // 栈顶元素优先级低
				OPTR = Push(OPTR, *c);
				c++;
				break;
			case '=': // 脱括号并接收下一字符
				OPTR = Pop(OPTR);
				c++;
				break;
			case '>': // 退栈并将运算结果入栈
				theta = OPTR->c; OPTR = Pop(OPTR);
				b = OPND->f; OPND = Pop(OPND);
				a = OPND->f; OPND = Pop(OPND);
				OPND = Push(OPND, Operate(a, theta, b));
				break;
			} //switch
		}
	} //while
	return OPND->f;
}
//符号函数
//-------------------------------------------------------------
string fuhao(int chu)
{
	string fu;
	int num_3;
	if (chu == 1)
	{
		num_3 = (rand() % 100) % 4;
		if (num_3 == 0) fu = '+';
		else if (num_3 == 1) fu = '-';
		else if (num_3 == 2) fu = '*';
		else fu = '/';
		return fu;
	}
	else
	{
		num_3 = (rand() % 20) % 2;
		if (num_3 == 0) fu = '+';
		else   fu = '-';
		return fu;
	}
}
//分数函数
//-------------------------------------------------------------
string  fenshu()
{
	int a1 = 0, b1 = 0, a2 = 0, b2 = 0;
	a1 = (rand() % (97));
	b1 = (rand() % (100 - a1)) + a1 + 1;
	a2 = (rand() % (97));
	b2 = (rand() % (100 - a2)) + a2 + 1;
	string first_a1, second_b1;
	string first_a2, second_b2;
	first_a1 = to_string(a1);
	second_b1 = to_string(b1);
	first_a2 = to_string(a2);
	second_b2 = to_string(b2);
	string all1 = "";
	//随机产生四则运算符
	int fu = 0;
	fu = (rand() % 100) % 2;
	if (fu == 0)
	{
		all1 = "(" + first_a1 + "/" + second_b1 + ")" + "+" + "(" + first_a2 + "/" + second_b2 + ")" + "=";
	}
	else if (fu == 1)
	{
		all1 = "(" + first_a1 + "/" + second_b1 + ")" + "-" + "(" + first_a2 + "/" + second_b2 + ")" + "=";
	}
	else if (fu == 2)
	{
		all1 = "(" + first_a1 + "/" + second_b1 + ")" + "*" + "(" + first_a2 + "/" + second_b2 + ")" + "=";
	}
	else
	{
		all1 = "(" + first_a1 + "/" + second_b1 + ")" + "/" + "(" + first_a2 + "/" + second_b2 + ")" + "=";
	}
	return all1;
}
//运算函数
//-------------------------------------------------------------
string yunsuan(int chu, int kuohao, int range)
{
	int num_1, num_2;
	int geshu;
	string str_first, str_second;
	string all = "";
	int ch1;
	geshu = (rand() % (8) + 2);
	ofstream fout;
	for (int i = 1; i <= geshu; i++)
	{
		num_1 = (rand() % (range)) + 1;
		str_first = to_string(num_1);
		num_2 = (rand() % (range)) + 1;
		str_second = to_string(num_2);
		if (kuohao == 1)
		{
			ch1 = (rand() % (4)) + 1;
			switch (ch1){
			case 1:
			{
					  if (all == "") { all = str_first + fuhao(chu) + str_second; }
					  else  { all = str_first + fuhao(chu) + all; }
			}break;
			case 2:
			{
					  if (all == "") { all = str_second + fuhao(chu) + str_first; }
					  else { all = all + fuhao(chu) + str_first; }
			}break;
			case 3:
			{
					  if (all == "") { all = "(" + str_first + fuhao(chu) + str_second + ")"; }
					  else { all = "(" + str_first + fuhao(chu) + all + ")"; }
			}break;
			case 4:
			{
					  if (all == ""){ all = "(" + str_second + fuhao(chu) + str_first + ")"; }
					  else { all = "(" + all + fuhao(chu) + str_first + ")"; }
			}break;
			}
		}
		else
		{
			ch1 = (rand() % (2)) + 1;
			switch (ch1){
			case 1:
			{
					  if (all == "") { all = str_first + fuhao(chu) + str_second; }
					  else  { all = str_first + fuhao(chu) + all; }
			}break;
			case 2:
			{
					  if (all == "") { all = str_second + fuhao(chu) + str_first; }
					  else { all = all + fuhao(chu) + str_first; }
			}break;
			}
		}
	}
	string c = all.substr(0, 1);
	string b = all.substr(all.length() - 1, all.length());
	if (c == "("&&b == ")")
	{
		all = all.substr(1, all.length() - 2);
		return all + "=";
	}
	else
	{
		return  all + "=";
	}
}


//主函数
//-------------------------------------------------------------
int main(void)
{
	srand(time(NULL));
	int chu, kuohao, range;
	int calculate_fenshu = 0;//统计分数个数
	int Y_N;
	int count;//设置循环次数
	int disport;
	ofstream file;
	ofstream file_result;
	FILE *f1;
	cout << "有无除法：（1：有，2：无）" << endl;
	cin >> chu;
	cout << "是否有括号：（1：有，2：无）" << endl;
	cin >> kuohao;
	cout << "请输入数值的范围：" << endl;
	cout << "1-";
	cin >> range;
	cout << "请输入一共有多少个算式：" << endl;
	cin >> count;
	//分数
	cout << "是否产生分数（产生真分数）：（1：是，2：否）" << endl;
	cin >> Y_N;
	file.open("test.txt");
	//************将生成的算式保存在文件中**********************
	if (Y_N == 1)
	{
		cout << "产生的" << count << "个算式中，希望有几个分数式：" << endl;
		cout << "（注：分数式结果请保留两位小数）" << endl;
		cin >> calculate_fenshu;
		for (int m = 0; m < calculate_fenshu; m++)
		{
			file << fenshu() << endl;
		}
	}

	for (int i = calculate_fenshu; i <= count; i++)
	{
		file << yunsuan(chu, kuohao, range) << endl;
		//fenshu();
	}
	file.close();
	//*************************
	char a[255];
	double cin_result;
	int jishu = 0;
	cout << "是否将生成的算式以及结果输出到文件：(1:是， 2：否)" << endl;
	cin >> disport;
	cout << "生成的四则运算式为：" << endl;
	cout << endl;
	if (disport == 1)
	{
		file_result.open("rusult.txt");
		file_result << "***************************四则运算式****************************" << endl;
		if (f1 = fopen("test.txt", "r"))
		{
			for (int j = 0; j < count; j++)
			{
				fscanf(f1, "%s", a); //文件内容一行不要大于255个字符

				cout << j + 1 << ".";
				cout << a << endl;
				file_result << j + 1 << "." << a << endl;
				cout << "请输入结果：" << endl;
				file_result << "请输入结果：" << endl;
				cin >> cin_result;
				file_result << cin_result;
				file_result << endl;
				if (fabs(cin_result - EvaluateExpression(a)) < 1e-2)
				{
					cout << "结果正确" << endl;
					file_result << "结果正确" << endl;
					jishu = jishu + 1;
				}
				else
				{
					cout << "结果错误,正确答案为:" << EvaluateExpression(a) << endl;
					file_result << "结果错误,正确答案为:" << EvaluateExpression(a) << endl;
				}
			}
			cout << "您一共答对" << jishu << "道题，答错" << count - jishu << "道题。" << endl;
			file_result << "您一共答对" << jishu << "道题，答错" << count - jishu << "道题。" << endl;
			fclose(f1);
		}
		file.close();
	}
	else
	{

		if (f1 = fopen("test.txt", "r"))
		{
			for (int j = 0; j < count; j++)
			{
				fscanf(f1, "%s", a); //文件内容一行不要大于255个字符
				cout << j + 1 << ".";
				cout << a << endl;
				cout << "请输入结果：" << endl;
				cin >> cin_result;
				if (fabs(cin_result - EvaluateExpression(a)) < 1e-2)
				{
					cout << "结果正确" << endl;
					jishu = jishu + 1;
				}
				else
				{
					cout << "结果错误,正确答案为:" << EvaluateExpression(a) << endl;
				}
			}
			cout << "您一共答对" << jishu << "道题，答错" << count - jishu << "道题。" << endl;
			fclose(f1);
		}
		file.close();
	}
	system("DEL /f test.txt");
	return 0;
}
